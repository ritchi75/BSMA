/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bsma;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

/**
 *
 * @author g_ric_000
 */
public class BSMAGui extends javax.swing.JFrame implements Observer {

    private ArrayList<Node> memoryChunks;
    private static final int VISUAL_MEMORY_WIDTH = 150; //how wide in pixels the memory will be 
    private static final int VISUAL_MEMORY_SCALE = 6;
    private static final int START_X = 120;
    private static final int START_Y = 150;
    
    /**
     * Creates new form BSMAGui
     */
    public BSMAGui() {
        initComponents();
        getContentPane().setBackground(Color.white);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 800));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BSMAGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BSMAGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BSMAGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BSMAGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new BSMAGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        
        Font font;
        g.setColor(Color.BLACK);
        font = new Font(Font.SANS_SERIF, Font.BOLD, 24);
        g.setFont(font);
        g.drawString("Binary Buddy Memory Management System!", 120, 80);
   
        //make a key explaining what different color chunks mean
        font = new Font(Font.SANS_SERIF, Font.PLAIN, 12);
        g.setFont(font);
        g.setColor(Color.GRAY);
        g.fill3DRect(START_X + 3, START_Y - 45, 15, 15, true);
        g.drawString("EMPTY", START_X + 23, START_Y - 33);
        g.setColor(Color.RED);
        g.fill3DRect(START_X + 3, START_Y - 25, 15, 15, true);
        g.drawString("OCCUPIED", START_X + 23, START_Y - 13);
        //draw a black box around the key
        g.setColor(Color.BLACK);
        g.drawRoundRect(START_X, START_Y - 50, 90, 43, 10, 10);
        
        int x = START_X;
        int y = START_Y;
        font = new Font(Font.SANS_SERIF, Font.PLAIN, 12);
        g.setFont(font);
        for (Node memoryChunk : memoryChunks) {
            if(memoryChunk.isEmpty()) {
                g.setColor(Color.GRAY);
            } else {
                g.setColor(Color.RED);
            }
            g.fill3DRect(x, y, VISUAL_MEMORY_WIDTH, memoryChunk.getSize() * VISUAL_MEMORY_SCALE, true);
            g.drawString(memoryChunk.toString(), x + 160, y + (memoryChunk.getSize() * (VISUAL_MEMORY_SCALE/2)));
            y += memoryChunk.getSize() * VISUAL_MEMORY_SCALE;
        }
    }

    @Override
    public void update(Observable observed, Object data) {
            memoryChunks = (ArrayList<Node>) data;
            repaint();
    }
}
